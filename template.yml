AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: CodeStar projectId used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  VseZaZabavoAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: VseZaZabavoAuthorizer
        Authorizers:
          VseZaZabavoAuthorizer:
            UserPoolArn: !GetAtt VseZaZabavoPool.Arn
  Main:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambdas/main
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-Main'
      Handler: index.handler
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref VseZaZabavoAPI
            Path: /
            Method: get
        PostEvent:
          Type: Api
          Properties:
            RestApiId: !Ref VseZaZabavoAPI
            Path: /
            Method: post

  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: id_prostora
          AttributeType: S
        - AttributeName: id_uporabnika
          AttributeType: S
        - AttributeName: regija
          AttributeType: S
        - AttributeName: ustvarjeno
          AttributeType: N
        - AttributeName: spremenjeno
          AttributeType: N
        - AttributeName: vidnost
          AttributeType: S
        - AttributeName: slika
          AttributeType: S
        - AttributeName: slike
          AttributeType: S
        - AttributeName: kratek_opis
          AttributeType: S
        - AttributeName: dolg_opis
          AttributeType: S
        - AttributeName: cena_od
          AttributeType: N
        - AttributeName: cena_do
          AttributeType: N
        - AttributeName: tip
          AttributeType: S
        - AttributeName: ime
          AttributeType: S
        - AttributeName: telefon
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
        - AttributeName: regija
          KeyType: RANGE
      #ProvisionedThroughput: 
      #  ReadCapacityUnits: 5
      #  WriteCapacityUnits: 5
      BillingMode: PAY_PER_REQUEST

  VseZaZabavoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: VseZaZabavoPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false